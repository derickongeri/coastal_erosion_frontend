/**
 * Collects spacing information about the columns of a potential table.  Each TableTemplate corresponds do
 * a part of a row, and they're nested recursively to match the JSON structure.
 *
 * Say you have an object/array where each item would make a nice row all by itself.  We want to try to line up
 * everything about it - comments, prop names, values.  If the row items are themselves objects/arrays, ideally
 * we'd like to line up all of their children, too, recursively.  This only works as long as the structure/types
 * are consistent.
 */
import { JsonItemType } from "./JsonItemType";
import { BracketPaddingType } from "./BracketPaddingType";
import { PaddedFormattingTokens } from "./PaddedFormattingTokens";
import { JsonItem } from "./JsonItem";
export declare class TableTemplate {
    /**
     * The property name in the table that this segment matches up with.
     */
    LocationInParent: string | undefined;
    Type: JsonItemType;
    /**
     * Assessment of whether this is a viable column.  The main qualifying factor is that all corresponding pieces
     * of each row are the same type.
     */
    IsRowDataCompatible: boolean;
    RowCount: number;
    NameLength: number;
    SimpleValueLength: number;
    PrefixCommentLength: number;
    MiddleCommentLength: number;
    PostfixCommentLength: number;
    PadType: BracketPaddingType;
    IsFormattableNumber: boolean;
    CompositeValueLength: number;
    TotalLength: number;
    /**
     * If this TableTemplate corresponds to an object or array, Children contains sub-templates
     * for the array/object's children.
     */
    Children: TableTemplate[];
    constructor(pads: PaddedFormattingTokens, allowReformattingNumbers: boolean);
    /**
     * Analyzes an object/array for formatting as a potential table.  The tableRoot is a container that
     * is split out across many lines.  Each "row" is a single child written inline.
     */
    MeasureTableRoot(tableRoot: JsonItem): void;
    TryToFit(maximumLength: number): boolean;
    FormatNumber(originalValueString: string): string;
    private readonly _pads;
    private readonly _allowReformattingNumbers;
    private _maxDigitsBeforeDecimal;
    private _maxDigitsAfterDecimal;
    private _dataContainsNull;
    /**
     * Adjusts this TableTemplate (and its children) to make room for the given rowSegment (and its children).
     */
    private MeasureRowSegment;
    private PruneAndRecompute;
    private GetTemplateComplexity;
    private ContainsDuplicateKeys;
}
